Day1: Arrays
Two Sum
Problem Statement:
Given a list of item prices, find indices of two items whose combined price equals a customer's gift card value.
Sample Input:
nums = [2, 7, 11, 15], target = 9
Expected Output:
[0, 1]
Explanation: The items at index 0 and 1 add up to 9 (2 + 7 = 9).

{
        "expertId":123,
        "ctc":4,
        "role":"developer"
    },
    {
        "expertId":456,
        "ctc":9,
        "role":"project manager"
    },
    {
        "expertId":765,
        "ctc":6,
        "role":"devops engineer"
    },
    {
        "expertId":912,
        "ctc":5,
        "role":"system design engineer"
    },
    {
        "expertId":123,
        "ctc":3,
        "role":"sdet"
    }

test cases:

target: 10
[developer, devops engineer]

target: 11
[devops engineer, system design engineer]



Maximum Subarray (Kadane’s Algorithm)
Problem Statement:
Find the contiguous period of maximum net income from daily financial logs.
Sample Input:
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Expected Output:
6
Explanation: Subarray [4, -1, 2, 1] yields the highest sum.




Move Zeroes
Problem Statement:
Rearrange a delivery queue where zeros indicate unavailable trucks; push them to the end without disrupting the rest.

	Sample Input:
	nums = [0, 1, 0, 3, 12]
	Expected Output:
	[1, 3, 12, 0, 0]

	Input:
	20,0,19,5,0,3,10,0,2
	Output:
	20,19,5,3,10,2,0,0,0

	Input:
	3,0,0,1,0,5,0,6,0
	Output:
	3,1,5,6,0,0,0,0,0


Best Time to Buy and Sell Stock
Problem Statement:
Identify the best day to buy and the best day to sell for highest profit from historical stock prices.
Sample Input:
	prices = [7, 1, 5, 3, 6, 4]
	Buy at 1 and sell at 6.

	45, 12, 3, 10, 50
	Best time to buy 3 best time to sell 50

	-10, -5, -2, -1, 1
	Best time to buy -10 best time to sell 1

	90, 40, 20, 10, 4
	Best time to buy 10 best time to sell 4




	Find Pivot Index
	Problem Statement:
	Determine the index at which the workload to its left equals the workload to its right.
	Sample Input:
	nums = [1, 7, 3, 6, 5, 6]
	Expected Output:
	3
	Explanation: 1 + 7 + 3 = 11, 5 + 6 = 11.
	Input:
	-7, 1, 5, 2, -4, 3, 0
	Output:
	3
	Input:
	0,-3,5,-4,-2,3,1,0
	Output:
	0




		Insert Interval
		Problem Statement:
		Insert a new booking and merge overlapping intervals in an existing schedule.

		Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
		Output: [[1,5],[6,9]]

		Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
		Output: [[1,2],[3,10],[12,16]]
		Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].







	Sort Colors (Dutch National Flag)
	Problem Statement:
		Assume that your are part of support team in IRCTC app where customers would raise issue and it will be considered priority ticket such as 0, 1 and 2. now today tickets are in the bucket and you need to arrange it by priority
		Example:
		Input:
		2,0,0,1,0,2,0,1
		Output:
		0,0,0,0,1,1,2,2
		Sample Input:
		nums = [2, 0, 2, 1, 1, 0]
		Expected Output:
		[0, 0, 1, 1, 2, 2]




Day 2: Arrays, String
		1. In the super market end of each day finding the raised bills to customer with invoice number, now find the 		missing invoice of the day.
		Example:
		Input:
		8,10,3,1,4,2,5
		Output:
		6
		Input:
		45,91,90,92,46
		Output:
		47
		Input:
		0,1,2,4,5,6,7
		Output:
		3

2. Find and apply charges of 20 each extra debit more than 3 in last 10 transaction of your account which has credit and debit combination
		Example:
		Input:
		900,1200,5600,120,450,670,100,10000,400,120
		Output:
		900,1200,5600,120,450,670,100,10000,400,96



3. Given an array nums of positive integers of size N. Find all distinct digits present in nums.
		Example 1:
		Input: nums = [131, 11, 48]
		Output: 1 3 4 8
		Explanation: 1, 3, 4, and 8 are only distinct
		digits that can be extracted from the numbers
		of the array.
		Example 2:
		Input: nums = [111, 222, 333, 4444, 666]
		Output: 1 2 3 4 6
		Explanation: 1, 2, 3, 4, and 6 are only distinct
		digits that can be extracted from the numbers
		of the array.


4. Twisted prime
Note: A number is called Twisted Prime if it is a prime and its reverse is also a prime.
Example 1:
Input: N = 97
Output: 1
Explanation: 97 is a prime number. Its 
reverse 79 is also a prime number. Thus 
97 is a  twisted Prime and so, the answer is 1.
Example 2:
Input: N = 43
Output: 0
Explanation: 43 is a prime number but its 
reverse 34 is not a prime.So, 43 is not a 
twisted prime and thus, answer is 0.

Find the least prime number within the boundary that can be added with first array element that makes them divisible by second array elements at respective index
		Input:
		int[] arr1 = {3, 5, 7};
		int[] arr2 = {10, 15, 20};
		Output:
		7 -1 13 
		Input:
		int[] arr1 = {4, 6, 8};
		int[] arr2 = {5, 10, 15};
		Output:
		-1 -1 -1




		Strings:
		Given two strings A and B, find if A is a subsequence of B.
		Example 1:
		Input:
		A = TCS
		B = Tata Service
		Output: 0
		Explanation: A is not a subsequence of B
		as 'C' appears after 'S'
		Example 2:
		Input:
		A = infy
		B = infosys
		Output: 1
		Explanation: A is a subsequence of B.
		Example 3:
		Input:
		A = cts
		B = cognizant technology
		Output: 0
		Explanation: A is not a subsequence of B.



Minimum Moves to Convert String
You are given a string s consisting of n characters which are either 'X' or 'O'.
A move is defined as selecting three consecutive characters of s and converting them to 'O'. Note that if a move is applied to the character 'O', it will stay the same.
Return the minimum number of moves required so that all the characters of s are converted to 'O'.
		Example 1:
		Input: s = "XXX"
		Output: 1	
		Explanation: XXX -> OOO
		We select all the 3 characters and convert them in one move.
		Example 2:
		Input: s = "XXOX"
		Output: 2
		Explanation: XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to 'O'.
Then we select the last 3 characters and convert them so that the final string contains all 'O's.
		Example 3:
		Input: s = "OOOO"
		Output: 0
Explanation: There are no 'X's in s to convert.



Consider that you are building console interface of customer's loan application where customer used to provide name, pan, aadhaar, email then they will set the password for their account. your role is to validate those information's using regex.
Example:
Input:
Name: "Raz",
Password: "razak$123",
Aadhaar: "765456787912",
PAN: "ABCDE1234F",
Email: "example@mail.com"

Output:
Account created

Example:
Input:
Name: "Ra",
Password: "razak$123",
Aadhaar: "7654567",
PAN: "ABCDE1234F",
Email: "example@mail.com"

Output:
Invalid name,invalid aadhaar

Example:
Input:
Name: "Raz",
Password: "razak123",
Aadhaar: "765456787912",
PAN: "ABCDE1234F",
Email: "example@mail.c"

Output:
Invalid password, invalid email




		Validating IPV4
		Input: s = "222.111.111.111"
		Output: true
		Explanation: Here, the IPv4 address is as per the criteria mentioned and also 		all four decimal numbers lies in the mentioned range.
		Input: s = "5555..555"
		Output: false
		Explanation: "5555..555" is not a valid. IPv4 address, as the middle two 			portions are missing.
		Input: s = "0.0.0.0255"
		Output: false




		Group Anagrams
		Problem Statement:
		Cluster search queries or user aliases that are scrambled versions of each other — useful in NLP or 		search optimization.
		Sample Input:
		strs = ["eat","tea","tan","ate","nat","bat"]
		Expected Output:
		[["eat","tea","ate"], ["tan","nat"], ["bat"]]



Day 3: Recursions
1. Assume that grocery shop generating bills with different amount, now the shopkeeper wants to cumulate the bills. so help him to find total revenue by using recursion
	Example:
	Input:
	[900,20,450,210,60]
	Output:
	1640




2. Find Max in array using recursion
		Example:
		Input: 0, 4, 5, 3, 7, 2, 1
		Output: 7

3. Using recursion, you are working on a vending machine software that dispenses change. Given an unlimited supply of currencies of different denominations (e.g., 100, 200, 500 etc.), you need to write a program to determine the minimum number of currencies required to make a given amount x. The program should accept the amount x and the list of denominations as input and output the minimum number of coins needed.
		Input: coins = [100, 200, 500]  , amount = 1100
		Output: 3
		Input: coins = [100, 200, 500]  , amount = 8700
		Output: 18

4. Using recursion find prefix and postfix sum
Input:
23,12,98,45,18,45,12,98
Output:
Prefix Sum: [23, 35, 133, 178, 196, 241, 253, 351]
Postfix Sum: [351, 328, 316, 218, 173, 155, 110, 98]


5. merge sort


6. using recursion find inversion count
Using recursion find the inversion of count
You are working for an e-commerce company that deals with a large volume of customer orders. The company wants to optimize its warehouse operations by analyzing the efficiency of order processing.
The goal is to count the number of inversion pairs in the order processing times to identify potential inefficiencies. An inversion pair in this context is defined as a situation where a later order (in terms of processing sequence) took less time to process than an earlier order. By identifying these inversions, you can pinpoint areas where the warehouse team may need to improve their workflow or processes.
Input
An array P[] of n integers representing the processing times of orders, in the order they were processed.
Output
The count of inversion pairs in the array.

		Example
		Input:
		P[] = [30, 45, 25, 60, 20]
		Output:
		The inversion count is 6
		Explanation: There are 5 inversion pairs in the array:
		(45, 25) where 45 > 25 and 
		(45, 20) where 45 > 20 and 
		(30, 25) where 30 > 25 and 
		(30, 20) where 30 > 20 and 
		(60, 20) where 60 > 20 and 
		(25, 20) where 25 > 20


Day 4:
		1. Find Factorial using recursion
		Example:
		Input: 5 
		Output: 120


		2. Find and print Fibonacci series using recursion
		Example:
		Input: 6
		Output: 0 1 1 2 3 5
		Input: 3
		Output: 0 1 1
		Input: 10
		Output: 0 1 1 2 3 5 8 13 21 34








3. This is one of the most popular coding problems which can be solved using the Dynamic Programming technique. In this problem we gonna find via recursion i.e divide and conquer, you are climbing a staircase. It takes n steps to reach the top. Each time you can either climb 1 or 2 steps. The question is, in how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.
		Example 1:
		Input: 2
		Output: 2
		Explanation: There are two ways to climb to the top.
		1. 1 step + 1 step
		2. 2 steps
		Example 2:
		Input: 3
		Output: 3
		Explanation: There are three ways to climb to the top.
		1. 1 step + 1 step + 1 step
		2. 1 step + 2 steps
		3. 2 steps + 1 step.
		Example 3:
		Input: 5
		Output: 8

		

		


		4. Letter Combinations of a Phone Number
		Problem Statement:
		Simulate predictive text on keypads — generate all possible word combinations based 		on digit inputs, just like T9 on old phones.
		Sample Input:
		digits = "23"
		Expected Output:
		["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]



5. Find the ranking of your skill set in google trends ranking of 10 demanded trends such as [Java developer, cloud architect, data analyst, devops engineer ,full stack developer, network associate] using binary search
		Example:
		Input: data analyst
		Output: 3
		Input: Devops engineer
		Output: -1
		Input: full stack developer
		Output: 5


6. Real-Time Scenario: Smart Home Security Optimization
    
    Problem: A smart home security system needs to determine the maximum 
    value of items that can be monitored without triggering adjacent sensors 
    (which would cause interference). Houses are arranged in a line, and 
    adjacent houses cannot be monitored simultaneously.
    
    Real-world application: IoT security systems, resource optimization

		Example: 
		Input: [100, 200, 300, 400, 500], 
		Output: 900
		Input: [500, 100, 300, 400, 200], 
		Output: 1000
		Input:[500, 100, 300, 400]
		Output: 900
		Input: [500, 400, 300, 200]
		Output: 800

Day 5:
Generate Parentheses
Problem Statement:
Design a code formatter to wrap operations in valid parentheses — useful in compiler design and syntax generation.
Sample Input:
n = 3
Expected Output:
["((()))","(()())","(())()","()(())","()()()"]



Quick Select:
Consider you are going to inquire about top kth package from placement history of past year companies offered. NOTE: using quick select
Example:
Input:[14, 23, 7, 15, 20]
k = 2
Output:20
k = 1
Output: 23
k = 5
Output: 7







Climbing Stairs via DP
Input: 5
Output: 8








	Factorial via DP:
	Input: 5
	Output: 120
	Input: 7
	Output: 5040










		Coin change via DP
		Input: coins = [100, 500, 200]  , amount = 1100
		Output: 3
		Input: coins = [100, 200, 500]  , amount = 8700
		Output: 18
		Input: [500,300], amount=1100
		Output: 3







Jump Game:
You’re given an array nums of non-negative integers where each element nums[i] is the maximum jump length from index i. Determine whether it’s possible to reach the last index starting from index 0.
Input Format:
- nums: List of integers (1 ≤ len(nums) ≤ 10⁴; 0 ≤ nums[i] ≤ 1000)
Output Format:
- Boolean value (True or False).
Sample Input:
nums = [2, 3, 1, 1, 4]
Sample Output:
True
Explanation:
Start at 0 → jump 2 → index 2 → jump 1 → index 3 → jump 1 → index 4.




Max SubSum Kaden's with DP:
You are given an integer array nums. Find the contiguous subarray (at least one element) with the maximum possible sum.
Input Format:
- nums: List of integers of length n (1 ≤ n ≤ 10⁵; -10⁴ ≤ nums[i] ≤ 10⁴)
Output Format:
- An integer, the maximum subarray sum.
Sample Input:
nums = [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Sample Output:
6
Explanation:
Maximum sum is from subarray [4, -1, 2, 1].


Day 6:
Decode ways:
Given a string s containing digits only, return the total number of ways to decode it using the mapping: 'A' = 1 to 'Z' = 26. '0' cannot be decoded on its own.
Input Format:
- s: A string of digits (1 ≤ len(s) ≤ 100)
Output Format:
- An integer denoting the number of decoding ways.
		Sample Input:
		s = "226"
		Sample Output:
		3
		Explanation:
		Valid decodings: "BZ", "VF", "BBF".






Grid Path Count MxN
Imagine you're designing an autonomous robot for warehouse navigation. The warehouse floor is laid out in an m x n grid. The robot can only move right or down, starting from the top-left cell to the bottom-right. You need to calculate how many unique paths the robot can take to reach the destination.
		Example
		Input: 3 3
		Output: 6
		Input: 2 2
		Output: 2
		Input: 1 5
		Output: 1
		Input: 4 1
		Output: 1
		Input: 4 3
		Output: 10



Day 7:
Minimum Path Sum:
Let’s say you’re optimizing cost-efficient delivery routes across a grid-like city. Each cell in the grid contains a cost to enter that area. Starting from the top-left, the goal is to reach the bottom-right with the minimum total cost, only moving right or down.
		Example
		Input: [[1,3,1],[1,5,1],[4,2,1]]
		Output: 7
		Input: [[1,2],[1,1]]
		Output: 3
		Input: [[5]]
		Output: 5
		Input: [[1,2,3],[4,5,6]]
		Output: 12
		Input: [[1,1,1],[1,1,1],[1,1,1]]
		Output: 5


Minimum Distance to calculate transfer one word to another 
Imagine you are a software engineer working on a document editing application. The application allows users to edit and correct typos in their documents. One of the features you are developing is a tool to calculate the minimum number of operations required to transform one word into another. This feature is crucial for suggesting the most efficient edits and corrections to the users.
Task: Given two words, implement a function that calculates the minimum number of operations required to convert the first word into the second word. The allowed operations are:
Insert a character
Delete a character
Replace a character

Input:
Two strings word1 and word2 representing the original word and the target word, respectively.
Output:
An integer representing the minimum number of operations required to convert word1 into word2.

		Example:
		Input: word1 = "horse", word2 = "rose"
		Output: 2
		Explanation:
		To transform "horse" into "rose", the following 2 operations are required:
		  1. Replace 'h' with 'r' -> "rorse"
		  2. Delete 'r' -> "rose"



Bioinformatics - DNA Sequence Analysis
    Problem: Find the Longest Common Subsequence (LCS) between two DNA sequences.
    This helps in identifying genetic similarities, evolutionary relationships,
    and mutations in genetic research.
    Real-world application: Genetics, medical research, evolutionary biology
		Example:
		Input: text1 = abcde, text2 = ace
		Ouput: 3
		Input: text1 = abc, text2 = def
		Ouput: 0
		Input: text1 = aggtab, text2 = gxtxayb
		Ouput: 4
		Input: text1 = aaaa, text2 = aa
		Ouput: 2
		Input: text1 = abcdef, text2 = acf
		Ouput: 3



Corporate Resource Allocation
    Problem: A company has a limited budget and needs to select projects 
    that maximize profit. Each project has a cost and expected profit.
    This is a classic 0/1 Knapsack problem applied to business scenarios.
    Real-world application: Project management, investment decisions, resource allocation

		Example:
		Input 1        
		weights: [1,2,3]   values: [10,15,40]  capacity: 5
		Output1: 55
		Input 2
	        weights: [1,3,4,5]  values: [10,40,50,70]  capacity: 8
		Output: 110
		Input 3
	        weights: [1,2,3,2]  values: [10,20,30,40]  capacity: 5
		Output: 70



Cryptocurrency Trading Strategy
    Problem: Find all palindromic subsequences in price patterns to identify 
    potential trading opportunities. Palindromic patterns often indicate 
    market reversals or consolidation phases.
    Real-world application: Algorithmic trading, pattern recognition, financial analysis
		Example:
		Input: HLHLHHL
		Ouput: 5
		Input: HHLLHH
		Ouput: 6
		Input: HHHLL
		Ouput: 3
